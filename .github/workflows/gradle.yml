name: Deploy Development Server

## develop 브랜치에 push가 되면 실행됩니다
on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      ## 여러분이 사용하는 버전을 사용하세요
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      ## Give permissions
      - name: Give permission
        run: chmod +x ./gradlew

      ## Gradle build
      - name: Build with Gradle
        run: ./gradlew bootJar

      ## Install Docker
      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io docker-compose

      ## 웹 이미지 빌드 및 도커허브에 push
      - name: Web Docker build and push
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker build -t sunghyun1356/ceos .
          docker push sunghyun1356/ceos
          docker build -f dockerfile-nginx -t sunghyun1356/ceos_nginx .
          docker push sunghyun1356/ceos_nginx

      - name: Executing remote SSH commands using private key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            ## Install Docker and Docker Compose
            sudo apt-get update
            sudo apt-get install -y docker.io docker-compose

            ## 여러분이 원하는 경로로 이동합니다.
            cd /home/ubuntu/
            
            ## .env 파일을 생성합니다.
            echo "${{ secrets.ENV_VARS }}" | sudo tee .env > /dev/null
            
            ## docker-compose.yaml 파일을 생성합니다.
            echo "${{ vars.DOCKER_COMPOSE }}" | sudo tee docker-compose.yaml > /dev/null
            
            ## docker-compose를 실행합니다.
            sudo chmod 666 /var/run/docker.sock
            sudo docker rm -f $(sudo docker ps -qa)
            sudo docker pull sunghyun1356/ceos
            sudo docker pull sunghyun1356/ceos_nginx
            sudo docker-compose -f docker-compose.yaml --env-file ./.env up -d
            sudo docker image prune -f
